{"version":3,"sources":["dbhelper.js","restaurant_info.js"],"names":["offlineMessage","document","getElementById","noDataMessage","dataSavedMessage","saveErrorMessage","DBHelper","id","1","2","3","4","5","6","7","8","9","10","lastUpdated","this","getLastUpdated","textContent","style","display","localStorage","getItem","date","setItem","result","console","log","error","response","ok","Error","statusText","json","pathToResource","fetch","then","validateResponse","readResponseAsJSON","restaurant","imageType","width","fileExtension","map","google","maps","Marker","position","latlng","title","name","url","getRestaurantURL","animation","Animation","DROP","elementBreadcrumb","elementCardPrimary","elementRestaurantName","elementRestaurantAddress","elementRestaurantCuisine","elementRestaurantHours","elementGoogleMap","elementReviewsContainer","elementReviewsList","window","initMap","getParameterByName","loadRestaurantNetworkFirst","endpointRestaurantById","getServerData","dataFromNetwork","self","updateRestaurantUI","createBreadcrumb","saveRestaurantsDataLocally","setLastUpdated","Date","catch","err","warn","createGoogleMaps","getLocalRestaurantByIdData","offlineData","Map","center","lat","lng","zoom","addMarkerForRestaurant","addListener","querySelector","setAttribute","picture","createResponsivePicture","parentNode","insertBefore","innerHTML","tabIndex","address","cuisine_type","operating_hours","updateRestaurantHoursUI","updateReviewsUI","operatingHours","key","row","createElement","className","day","appendChild","time","reviews","arguments","length","undefined","noReviews","forEach","review","createReviewHTML","li","divCardPrimary","divCardActions","rating","append","divCardSecondary","comments","location","href","replace","results","RegExp","exec","decodeURIComponent","sizes","srcsetWebP","getImageUrlForRestaurant","srcsetJPEG","sourceWebP","srcset","type","sourceDefault","defaultImg","imageSrc","src","altText","getAlternativeText","alt"],"mappings":"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","file":"resto-bundle.min.js","sourcesContent":["const offlineMessage = document.getElementById('offline');\r\nconst noDataMessage = document.getElementById('no-data');\r\nconst dataSavedMessage = document.getElementById('data-saved');\r\nconst saveErrorMessage = document.getElementById('save-error');\r\n\r\n\r\n/**\r\n * DBHelper provides functions to interact with the local development API server\r\n * provided by Udacity for project 2.\r\n * https://github.com/udacity/mws-restaurant-stage-2\r\n * curl \"http://localhost:1337/restaurants\"\r\n * curl \"http://localhost:1337/restaurants/{3}\"\r\n */\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Alternative Text as the API server doesn't provide it.\r\n   */\r\n  static getAlternativeText(id) {\r\n    const altTexts = {\r\n      1: \"Interior of Mission Chinese Food\",\r\n      2: \"Pizza Quattro Formaggi\",\r\n      3: \"Interior of Kang Ho Dong Baekjeong\",\r\n      4: \"Outside view of Katz's Delicatessen at night\",\r\n      5: \"Open kitchen of Roberta's Pizza\",\r\n      6: \"People queueing at Hometown BBQ\",\r\n      7: \"Outside view of Superiority Burger\",\r\n      8: \"Outside view of The Dutch\",\r\n      9: \"People eating at Mu Ramen\",\r\n      10: \"Interior of Casa Enrique\"\r\n    };\r\n    return altTexts[id];\r\n  }\r\n\r\n  // Alert user that data may not be current\r\n  // \"You're offline and viewing stored data.\"\r\n  static messageOffline() {\r\n    const lastUpdated = this.getLastUpdated();\r\n    if (lastUpdated) {\r\n     offlineMessage.textContent += ' Last fetched server data: ' + lastUpdated;\r\n    }\r\n    offlineMessage.style.display = 'block';\r\n  }\r\n\r\n  // Alert user that there is no data available.\r\n  // \"You're offline and local data is unavailable.\"\r\n  static messageNoData() {\r\n    //\r\n    noDataMessage.style.display = 'block';\r\n  }\r\n\r\n  // Alert user that data has been saved for offline.\r\n  // \"Server data was saved for offline mode.\"\"\r\n  static messageDataSaved() {\r\n    const lastUpdated = this.getLastUpdated();\r\n    if (lastUpdated) {dataSavedMessage.textContent += ' on ' + lastUpdated;}\r\n    dataSavedMessage.style.display = 'block';\r\n  }\r\n\r\n  // Alert user that data couldn't be saved offline\r\n  // \"Server data couldn't be saved offline.\"\"\r\n  static messageSaveError() {\r\n    saveErrorMessage.style.display = 'block';\r\n  }\r\n\r\n  // Util network function.\r\n  static getLastUpdated() {\r\n    return localStorage.getItem('lastUpdated');\r\n  }\r\n\r\n  // Util network function.\r\n  static setLastUpdated(date) {\r\n    localStorage.setItem('lastUpdated', date);\r\n  }\r\n\r\n  /*\r\n   * logResult is available for debugging puprposes, it does some logging\r\n   * of the JSON data.\r\n   */\r\n  static logResult(result) {\r\n    console.log(result);\r\n  }\r\n\r\n  /*\r\n   * The fetch call returns a promise that resolves to a response object.\r\n   * If the request does not complete, .catch takes over and is passed the\r\n   * corresponding error.\r\n   */\r\n  static logError(error) {\r\n    console.log('[ERROR] Looks like there was a problem: \\n', error);\r\n  }\r\n\r\n  /*\r\n   * validateResponse checks if the response is valid (is it a 200-299?).\r\n   * If it isn't, an error is thrown, skipping the rest of the then blocks and\r\n   * triggering the catch block. Without this check bad responses are passed\r\n   * down the chain and could break later code that may rely on receiving\r\n   * a valid response. If the response is valid, it is passed to\r\n   * readResponseAsJSON.\r\n   * TODO: respond with custom pages for different errors or handle other\r\n   * responses that are not ok (i.e., not 200-299), but still usable\r\n   * (e.g., status codes in the 300 range)\r\n   */\r\n  static validateResponse(response) {\r\n    if (!response.ok) {\r\n      throw Error(response.statusText);\r\n    }\r\n    return response;\r\n  }\r\n\r\n  /*\r\n   * readResponseAsJSON reads the body of the response using the Response.json()\r\n   * method. This method returns a promise that resolves to JSON. Once this\r\n   * promise resolves, the JSON data is passed to logResult.\r\n   */\r\n  static readResponseAsJSON(response) {\r\n    return response.json();\r\n  }\r\n\r\n  /**\r\n   * Get the database URL.\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337;\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * getServerData\r\n   */\r\n  static getServerData(pathToResource) {\r\n    // Fetch is called on a resource and Fetch returns a promise that will\r\n    // resolve to a response object. When the promise resolves, the response\r\n    // object is passed to validateResponse.\r\n    return fetch(pathToResource)\r\n      .then(this.validateResponse)\r\n      .then(this.readResponseAsJSON)\r\n      // Once the promise resolves, the JSON data is passed to logResult.\r\n      // .then(this.logResult)\r\n      // .catch(this.logError);\r\n  }\r\n\r\n  /**\r\n   * Returns the relative url for a restaurant.\r\n   */\r\n  static getRestaurantURL(restaurant) {\r\n    // return `./restaurant.html?id=${restaurant.id}`\r\n    return `restaurant.html?id=${restaurant.id}`\r\n  }\r\n\r\n  /**\r\n   * Returns the restaurant image URL.\r\n   * Using id to construct urls as the local development API server doesn't\r\n   * always have a photograph field.\r\n   * jpg is default image type.\r\n   * 800 is default width.\r\n   */\r\n  static getImageUrlForRestaurant(restaurant, imageType, width) {\r\n    // Default image type is jpeg.\r\n    let fileExtension = 'jpg';\r\n    switch (imageType) {\r\n      case 'jpeg':\r\n        break;\r\n      case 'webp':\r\n        fileExtension = 'webp';\r\n        break;\r\n      default:\r\n        console.log(`[DEBUG] unhandled imageType: ${imageType}`);\r\n    }\r\n    if (typeof width !== 'undefined') {\r\n      return `img/${restaurant.id}_w_${width}.${fileExtension}`;\r\n    } else {\r\n      return `img/${restaurant.id}_w_800.${fileExtension}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a Google Maps marker for a restaurant.\r\n   */\r\n  static addMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.getRestaurantURL(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n","/**\n * TODO: Add to Home Screen (aka Web App Install Banners)\n * trigger the Add to Home Screen prompt by using the beforeinstallprompt event.\n * https://developers.google.com/web/fundamentals/app-install-banners/\n */\n\n// Declare global variables.\nlet map;\nlet restaurant;\n\n// Declare the id elements.\nconst elementBreadcrumb = document.getElementById('breadcrumb');\nconst elementCardPrimary = document.getElementById('card-primary');\nconst elementRestaurantName = document.getElementById('restaurant-name');\nconst elementRestaurantAddress = document.getElementById('restaurant-address');\nconst elementRestaurantCuisine = document.getElementById('restaurant-cuisine');\nconst elementRestaurantHours = document.getElementById('restaurant-hours');\nconst elementGoogleMap = document.getElementById('map');\nconst elementReviewsContainer = document.getElementById('reviews-container');\nconst elementReviewsList = document.getElementById('reviews-list');\n\n\n/**\n * Initialize Google map, called from HTML.\n * https://developers.google.com/maps/documentation/javascript/tutorial\n */\nwindow.initMap = () => {\n  // Fetch restaurant by using url parameter on current page.\n  const id = getParameterByName('id');\n  loadRestaurantNetworkFirst(id);\n}\n\n/**\n * Fetch a restaurant by its ID from network and fallback to IndexedDB,\n * update UI.\n */\nconst loadRestaurantNetworkFirst = (id) => {\n  const endpointRestaurantById = `http://localhost:1337/restaurants/${id}`;\n  DBHelper.getServerData(endpointRestaurantById)\n  .then(dataFromNetwork => {\n    self.restaurant = dataFromNetwork;\n    updateRestaurantUI();\n    createBreadcrumb();\n    saveRestaurantsDataLocally(dataFromNetwork)\n    .then(() => {\n      DBHelper.setLastUpdated(new Date());\n      // DBHelper.messageDataSaved();\n    }).catch(err => {\n      // DBHelper.messageSaveError();\n      console.warn(err);\n    });\n    createGoogleMaps();\n  }).catch(err => {\n    console.log('[DEBUG] Network requests have failed, this is expected if offline');\n    getLocalRestaurantByIdData(id)\n    .then(offlineData => {\n      // DBHelper.messageOffline();\n      self.restaurant = offlineData;\n      updateRestaurantUI();\n      createBreadcrumb();\n      createGoogleMaps();\n    }).catch(err => {\n      // DBHelper.messageNoData();\n      console.warn(err);\n    });\n  });\n}\n\nconst createGoogleMaps = () => {\n  let loc = {lat: 40.722216, lng: -73.987501};\n  // Not using scrollwheel: False anymore, using default gestureHandling: auto\n  // https://developers.google.com/maps/documentation/javascript/interaction\n  // self.map = new google.maps.Map(elementGoogleMap, {\n  map = new google.maps.Map(elementGoogleMap, {\n    // center: restaurant.latlng,\n    center: loc,\n    zoom: 12\n  });\n  DBHelper.addMarkerForRestaurant(self.restaurant, self.map);\n  // a11y - Frames must have non-empty title attribute\n  // https://dequeuniversity.com/rules/axe/2.2/frame-title\n  // https://developers.google.com/maps/documentation/javascript/events\n  let setTitle = () => {\n    const iFrameGoogleMaps = document.querySelector('#map iframe');\n    iFrameGoogleMaps.setAttribute('title', 'Google Maps overview of restaurants');\n  }\n  // self.map.addListener('tilesloaded', setTitle);\n  map.addListener('tilesloaded', setTitle);\n};\n\n/**\n * Create restaurant details, update operating hours and the review cards.\n */\nconst updateRestaurantUI = () => {\n  // There is no insertAfter method. It can be emulated by combining the\n  // insertBefore method with nextSibling.\n  const picture = createResponsivePicture(self.restaurant);\n  // A reference to card-primary is needed before we can insert the element.\n  // Get a reference to the parent element.\n  const parentElement = elementCardPrimary.parentNode;\n  // console.log(parentElement);\n  // Insert the new element into the DOM before elementCardPrimary.\n  parentElement.insertBefore(picture, elementCardPrimary);\n\n  elementRestaurantName.innerHTML = self.restaurant.name;\n  elementRestaurantName.tabIndex = '0';\n\n  elementRestaurantAddress.innerHTML = self.restaurant.address;\n\n  elementRestaurantCuisine.innerHTML = self.restaurant.cuisine_type;\n\n  if (restaurant.operating_hours) {\n    updateRestaurantHoursUI();\n  }\n  updateReviewsUI();\n}\n\n/**\n * Create table data with restaurant operating hours.\n */\nconst updateRestaurantHoursUI = () => {\n  let operatingHours = self.restaurant.operating_hours;\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n    row.className = 'restaurant-card-table-content';\n    row.tabIndex = '0';\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    elementRestaurantHours.appendChild(row);\n  }\n}\n\n/**\n * Create reviews cards.\n */\nconst updateReviewsUI = (reviews = self.restaurant.reviews) => {\n  const title = document.createElement('h3');\n  title.className = 'reviews-title';\n  title.innerHTML = 'Reviews';\n  elementReviewsContainer.appendChild(title);\n\n  // TODO: test with no reviews.\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    elementReviewsContainer.appendChild(noReviews);\n    return;\n  }\n\n  reviews.forEach(review => {\n    elementReviewsList.appendChild(createReviewHTML(review));\n  });\n  elementReviewsContainer.appendChild(elementReviewsList);\n}\n\n/**\n * Create a review card.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  li.className = 'review-card';\n\n  // Create a div with class card-primary that contains h2, h3.\n  const divCardPrimary = document.createElement('div');\n  divCardPrimary.className = 'card-primary';\n  // Restaurant name.\n  const name = document.createElement('h2');\n  name.className = 'card-title';\n  name.innerHTML = review.name;\n  divCardPrimary.appendChild(name);\n  // Review date.\n  const date = document.createElement('h3');\n  date.className = 'card-subtitle';\n  date.innerHTML = review.date;\n  divCardPrimary.appendChild(date);\n  li.appendChild(divCardPrimary);\n\n  // Create a div with class review-card-rating.\n  const divCardActions = document.createElement('div');\n  divCardActions.className = 'review-card-rating';\n  const rating = document.createElement('p');\n  rating.className = 'review-card-rating-content';\n  rating.innerHTML = `Rating: ${review.rating}`;\n  divCardActions.append(rating);\n  li.appendChild(divCardActions);\n\n  // Create a div with class card-secondary that contains further content.\n  const divCardSecondary = document.createElement('div');\n  divCardSecondary.className = 'card-secondary';\n  // Review text.\n  const comments = document.createElement('p');\n  comments.className = 'card-secondary-content';\n  comments.innerHTML = review.comments;\n  divCardSecondary.appendChild(comments);\n  li.appendChild(divCardSecondary);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu.\n */\nconst createBreadcrumb = (restaurant=self.restaurant) => {\n  const li = document.createElement('li');\n  li.className = 'breadcrumb';\n  li.innerHTML = restaurant.name;\n  // a11y - indicate current page\n  // https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html -->\n  li.setAttribute('aria-current', 'page');\n  elementBreadcrumb.appendChild(li);\n}\n\n/**\n * Get an URL parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Create a responsive image.\n *\n * Main page\n * 0 to 479px: card has width 100%, so 1 img 100% (455 x 321).\n * 480 to 599px: card has width 100%, so 1 img fullwidth (567 x 425).\n * 600 to 839px: card has width 45%, so 2 img 45% (378 x 283).\n * 840 to 959px: card has width 45%, so 2 img 45% (432 x 324).\n * 960 to 1279px: card has width 30%, so 3 img 30% (384 x 289).\n * 1280px to x: card has width 22.5%, so 4 img 22.5% (minimum 288 x 216).\n *\n * Restaurant Info\n * 0 to 479px: card has width 100%, so 1 img 100% (479 x 359).\n * 480 to 599px: card has width 100%, so 1 img fullwidth (599 x 449).\n * 600 to 839px: card has width 50%, so 1 img 50% (419.5 x 315).\n * 840 to 959px: card has width 50%, so 1 img 50% (479.5 x 360).\n * 960 to 1279px: card has width 50%, so 1 img 50% (639.5 x 480).\n * 1280px to x: card has width 50%, so 1 img 50% (minimum 640 x 480).\n *\n * Image breakpoints have been determined using the Cloudinary generator.\n * http://www.responsivebreakpoints.com/\n * Image widths are 300, 433, 552, 653, 752, 800\n *\n * The srcset attribute gives the browser the option to choose which file\n * to use. However, the browser has no way of determining the file sizes before\n * it loads them, so it always chooses the first image in the list.\n *\n * To load the correct image size based on the viewport width we need to tell\n * the browser how big each file is before it fetches them.\n * By adding a width descriptor to each file in the srcset, we are telling\n * the browser the width of each image in pixels before it fetches the image.\n * The browser can then use these widths to decide which image to fetch based\n * on its window size. It fetches the image with the smallest width that is\n * still larger than the viewport width.\n *\n * Because the CSS is parsed after the HTML at runtime, the browser has no way\n * to know what the final display size of the image will be when it fetches it.\n * Unless we tell it otherwise, the browser assumes the images will be displayed\n * at 100% of the viewport width and fetches the images based on this.\n *\n * The sizes value matches the image's max-width value in the CSS. The browser\n * now has everything it needs to choose the correct image version. The browser\n * knows its own viewport width and the pixel density of the user's device,\n * and we have given it the source files' dimensions (using width descriptor)\n * and the image sizes relative to the viewport (the sizes attribute).\n *\n * The media query tests the viewport width of the screen, and applies the CSS.\n * We can tell the browser about the media query in the sizes attribute so that\n * it fetches the correct image when the image changes size.\n *\n * We can use the <picture> element and the <source> element, in combination\n * with media queries, to change the image source as the window is resized.\n *\n * The <picture> element lets us define multiple source files using the\n * <source> tag. This is different than simply using an <img> tag with the\n * srcset attribute because the source tag lets us add things like media queries\n * to each set of sources. Instead of giving the browser the image sizes and\n * letting it decide which files to use, we can define the images to use at\n * each window size.\n *\n * If the user's browser doesn't support the <picture> element, it fetches\n * whatever is in the <img> element. The <picture> element is just used to\n * specify multiple sources for the <img> element contained in it. The <img>\n * element is what displays the image.\n *\n * Display density descriptors are great for fixed width images, but are\n * insufficient for flexible images.\n */\nconst createResponsivePicture = (restaurant) => {\n  const picture = document.createElement('picture');\n\n  // sizes: the browser ignores everything after the first matching condition.\n  const sizes = '(max-width: 37.4375rem) 100vw, (min-width: 37.5rem) 50vw, 100vw';\n\n  // srcset\n  const srcsetWebP =\n    `${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 300)} 300w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 433)} 433w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 552)} 552w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 653)} 653w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 752)} 752w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'webp', 800)} 800w`;\n\n  const srcsetJPEG =\n    `${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 300)} 300w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 433)} 433w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 552)} 552w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 653)} 653w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 752)} 752w,\n    ${DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 800)} 800w`;\n\n  const sourceWebP = document.createElement('source');\n  sourceWebP.srcset = srcsetWebP;\n  sourceWebP.sizes = sizes;\n  sourceWebP.type = 'image/webp';\n  picture.appendChild(sourceWebP);\n\n  const sourceDefault = document.createElement('source');\n  sourceDefault.srcset = srcsetJPEG;\n  sourceDefault.sizes = sizes;\n  sourceDefault.type = 'image/jpeg';\n  picture.appendChild(sourceDefault);\n\n  const defaultImg = document.createElement('img');\n  // Get default image which should be width 800.\n  const imageSrc = DBHelper.getImageUrlForRestaurant(restaurant, 'jpeg', 800);\n  defaultImg.src = imageSrc;\n\n  let altText = DBHelper.getAlternativeText(restaurant.id);\n  if (!altText) {\n    altText = `Restaurant ${restaurant.name}`;\n  }\n  defaultImg.alt = altText;\n  // defaultImg.setAttribute('tabindex', '0');\n  defaultImg.tabIndex = '0';\n  picture.appendChild(defaultImg);\n\n  return picture;\n}\n"],"sourceRoot":"/source/"}